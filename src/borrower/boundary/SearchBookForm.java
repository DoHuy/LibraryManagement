/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package borrower.boundary;

import common.boundary.BookDetailForm;
import common.boundary.MainForm;
import common.controller.BookController;
import common.controller.BookRelaController;
import entity.Book;
import java.awt.Component;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 * Lớp bao cho tìm kiếm sách
 *
 * @author Raph
 */
public class SearchBookForm extends javax.swing.JPanel {

    /**
     * Creates new form BorroweRegister
     */
    public SearchBookForm() {
        initComponents();
        lblStatus.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        rbtnSearchBookName = new javax.swing.JRadioButton();
        rbtnSearchCategory = new javax.swing.JRadioButton();
        rbtnSearchAuthor = new javax.swing.JRadioButton();
        rbtnSearchPublisher = new javax.swing.JRadioButton();
        lblStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(901, 467));

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyTyped(evt);
            }
        });

        jButtonSearch.setText("Tìm sách");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tiêu đề", "Thể loại", "Tác giả", "Nhà phát hành", "ISBN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Kết quả");

        btnGroup.add(rbtnSearchBookName);
        rbtnSearchBookName.setSelected(true);
        rbtnSearchBookName.setText("Tìm theo tên sách");

        btnGroup.add(rbtnSearchCategory);
        rbtnSearchCategory.setText("Tìm theo thể loại");

        btnGroup.add(rbtnSearchAuthor);
        rbtnSearchAuthor.setText("Tìm theo tác giả");

        btnGroup.add(rbtnSearchPublisher);
        rbtnSearchPublisher.setText("Tìm theo nhà phát hành");

        lblStatus.setForeground(new java.awt.Color(255, 0, 0));
        lblStatus.setText("Không tìm thấy bất cứ cuốn sách nào như vậy");

        jLabel2.setText("Nhập từ khóa");

        jLabel3.setFont(new java.awt.Font("UTM Copperplate", 1, 24)); // NOI18N
        jLabel3.setText("Tìm kiếm sách");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1)
                                .addGap(71, 71, 71)
                                .addComponent(lblStatus)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(jButtonSearch))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbtnSearchBookName)
                        .addGap(96, 96, 96)
                        .addComponent(rbtnSearchCategory)
                        .addGap(101, 101, 101)
                        .addComponent(rbtnSearchAuthor)
                        .addGap(102, 102, 102)
                        .addComponent(rbtnSearchPublisher)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnSearchBookName)
                    .addComponent(rbtnSearchCategory)
                    .addComponent(rbtnSearchAuthor)
                    .addComponent(rbtnSearchPublisher))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblStatus))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        search();

    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextFieldSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyTyped
        // TODO add your handling code here:
        lblStatus.setVisible(false);
    }//GEN-LAST:event_jTextFieldSearchKeyTyped

    /**
     * Mỗi khi ấn vào một hàng (1 sách) sẽ nhảy đến thông tin chi tiết cuốn sách
     *
     * @param evt : sự kiện click
     */
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String bookId = model.getValueAt(row, 0).toString();
        String bookName = model.getValueAt(row, 1).toString();
        String category = model.getValueAt(row, 2).toString();
        String author = model.getValueAt(row, 3).toString();
        String publisher = model.getValueAt(row, 4).toString();
        String isbn = model.getValueAt(row, 5).toString();

        JPanel detailsPanel = new BookDetailForm(bookId, bookName, category, author, publisher, isbn, MainForm.getTypeUser());
        detailsPanel.setBounds(0, 0, 900, 465);

        this.removeAll();
        this.repaint();
        this.revalidate();
        this.add(detailsPanel);

        this.repaint();
        this.revalidate();
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * Hàm tìm kiếm theo từng loại tìm kiếm
     */
    private void search() {
        String key = jTextFieldSearch.getText();
        if (key.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ô tìm kiếm trống", "Thông báo", JOptionPane.WARNING_MESSAGE);
        } else {
            ArrayList<Book> books = new ArrayList<>();
            Vector<String> row;

            if (rbtnSearchBookName.isSelected()) {
                try {
                    books = BookController.getInstance().searchBook(key, BookController.SEARCH_BY_BOOK_NAME);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(SearchBookForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            };

            if (rbtnSearchCategory.isSelected()) {
                try {
                    books = BookController.getInstance().searchBook(key, BookController.SEARCH_BY_CATEGORY);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(SearchBookForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            };

            if (rbtnSearchAuthor.isSelected()) {
                try {
                    books = BookController.getInstance().searchBook(key, BookController.SEARCH_BY_AUTHOR);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(SearchBookForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            };

            if (rbtnSearchPublisher.isSelected()) {
                try {
                    books = BookController.getInstance().searchBook(key, BookController.SEARCH_BY_PUBLISHER);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(SearchBookForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            };

            if (!books.isEmpty()) {
                lblStatus.setVisible(false);
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);
                for (Book book : books) {
                    row = new Vector<>();
                    row.add(book.getBookId());
                    row.add(book.getNameOfBook());
                    try {
                        row.add(BookRelaController.getInstance().getCategoryByID(book.getCategoryID()));
                        row.add(book.getAuthor());
                        row.add(BookRelaController.getInstance().getPublisherByID(book.getPublisherID()));
                    } catch (ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(SearchBookForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    row.add(book.getIsbn());
                    model.addRow(row);
                }
                
                adjustColumnSize(jTable1);
            } else {
                lblStatus.setVisible(true);
            }
        }

    }

    private void adjustColumnSize(javax.swing.JTable table) {
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                if (preferredWidth >= maxWidth) {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JRadioButton rbtnSearchAuthor;
    private javax.swing.JRadioButton rbtnSearchBookName;
    private javax.swing.JRadioButton rbtnSearchCategory;
    private javax.swing.JRadioButton rbtnSearchPublisher;
    // End of variables declaration//GEN-END:variables
}
